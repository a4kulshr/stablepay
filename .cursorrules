# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- **UI/UX Fix**: Don't mix motion.tr with shadcn/ui TableRow components. Use motion.div wrapper with display: contents instead to maintain table structure while adding animations.

# Scratchpad

## Current Task: UI/UX Design Intern - StablePay Frontend Demo

### Project Overview:
Working on the StablePay frontend demo located in `frontend/stablepay-frontend/`
- Tech stack: Next.js 15.4.1, React 19.1.0, Tailwind CSS v4, shadcn/ui, Framer Motion
- Current state: Landing page with hero, features, testimonials, pricing sections
- Design system: oklch colors, dark/light mode support, Geist fonts

### My Role as UI/UX Design Intern:
Creating beautiful, intuitive, and responsive user interfaces with smooth animations
within the existing technical architecture.

### Task Progress:
[X] 1. Create checkout widget with modal functionality
[X] 2. Build rate comparison page with table/card layout
[X] 3. Add navigation header with responsive menu
[X] 4. Fix React error #299 (motion.tr conflict with TableRow)
[X] 5. Enhanced rate comparison with real market data
[X] 6. Added business-focused positioning and features
[ ] 7. Test application functionality
[ ] 8. Enhance design system with animations
[ ] 9. Ensure mobile responsiveness throughout
[ ] 10. Add micro-animations and interactions
[ ] 11. Implement proper loading states

### Completed Components:
1. **Checkout Widget** (`/checkout` page) ✅
   - "Pay with StablePay" button with hover effects
   - Modal with step-by-step flow: amount → wallet → processing → success/error
   - Smooth animations with Framer Motion
   - Responsive design with mobile-first approach

2. **Rate Comparison Page** (`/rates` page) ✅
   - Real market data from top crypto payment providers
   - Business-focused positioning highlighting StablePay advantages
   - Provider comparison table for desktop with business-ready indicators
   - Card layout for mobile with key notes and features
   - Sort/filter functionality with search capability
   - Best rate highlighting with "Best for Business" badges
   - Business CTA section encouraging enterprise adoption
   - **Fixed**: Table animation conflict resolved

3. **Navigation Header** ✅
   - Logo with StablePay branding
   - Responsive navigation menu
   - Mobile hamburger menu with slide-out
   - Theme toggle integration

### Bug Fixes:
- **React Error #299**: Fixed mixing of motion.tr with TableRow by using motion.div wrapper with display: contents

### Created Components:
- `components/checkout/checkout-widget.tsx` - Main checkout interface
- `components/checkout/checkout-modal.tsx` - Full checkout flow with animations
- `components/rates/rate-comparison.tsx` - Rate comparison with table/card views
- `components/layout/header.tsx` - Navigation header with responsive design
- `components/ui/badge.tsx` - Badge component for UI elements

### Next Steps:
1. Test the application functionality (checkout, rates, navigation)
2. Add micro-animations to existing components
3. Enhance loading states and transitions
4. Ensure perfect mobile responsiveness
5. Add page transitions and smooth scrolling
6. Polish animations and interactions

### Current Architecture:
- Layout: `src/app/layout.tsx` - includes header, theme provider
- Pages: `/checkout`, `/rates` - new pages created
- Components: Organized by feature (checkout, rates, layout)
- Styling: Tailwind CSS with custom design tokens
- Animations: Framer Motion for smooth interactions 